<document>
  <properties>
    <author email="sven@users.sourceforge.net">Sven Meier</author>
    <title>Spin your Swing</title>
  </properties>
  <body>
    <section name="Acknowledgment">
      <subsection name="Foxtrot"> 
        <p>
          The <em>Spin</em> project is influenced by the <a class="external" href="http://foxtrot.sourceforge.net">Foxtrot</a> project. Foxtrot is the inventor of the <b>Synchronous Model</b> (<em>Spin</em> has adopted this technique) but uses an API that is similar to <code>SwingWorker</code>. It offers a subset of <em>Spin</em>s features - it lacks transparent exception handling and offers no solution for asynchronous callbacks:
        </p>

<!--
public void actionPerformed(ActionEvent e)
{
  label.setText("...");
  String text = (String)Worker.post(new Job()
  {
    public Object run()
    {
      return bean.getValue();
    }
  });
  label.setText(text);
}
-->
<div class="java">
<h3 class="java">GUI.java</h3>
<code class="java"><span class="java4">public </span><span class="java9">void </span><span class="java10">actionPerformed</span><span class="java8">(</span><span class="java10">ActionEvent e</span><span class="java8">)<br />
{<br />
&#xA0; </span><span class="java10">label.setText</span><span class="java8">(</span><span class="java5">&#34;...&#34;</span><span class="java8">)</span><span class="java10">;<br />
&#xA0; String text = </span><span class="java8">(</span><span class="java10">String</span><span class="java8">)</span><span class="java10">Worker.post</span><span class="java8">(</span><span class="java4">new </span><span class="java10">Job</span><span class="java8">()<br />
&#xA0; {<br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java10">Object run</span><span class="java8">()<br />
&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return </span><span class="java10">bean.getValue</span><span class="java8">()</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
&#xA0; })</span><span class="java10">;<br />
&#xA0; label.setText</span><span class="java8">(</span><span class="java10">text</span><span class="java8">)</span><span class="java10">;<br />
</span><span class="java8">}</span></code></div>

        <p>
          The following code shows how Foxtrot can be 'simulated' with <em>Spin</em> (if you insist on restricting yourself to only one generic interface named <code>Job</code> or what-ever-you-like):
        </p>

<!--
public void actionPerformed(ActionEvent e)
{
  label.setText("...");
  String text = ((Job)Spin.off(new Job()
  {
    public String run()
    {
      return bean.getValue();
    }
  })).run();
  label.setText(text);
}
-->
<div class="java">
<h3 class="java">GUI.java</h3>
<code class="java"><span class="java4">public </span><span class="java9">void </span><span class="java10">actionPerformed</span><span class="java8">(</span><span class="java10">ActionEvent e</span><span class="java8">)<br />
{<br />
&#xA0; </span><span class="java10">label.setText</span><span class="java8">(</span><span class="java5">&#34;...&#34;</span><span class="java8">)</span><span class="java10">;<br />
&#xA0; String text = </span><span class="java8">((</span><span class="java10">Job</span><span class="java8">)</span><span class="java10">Spin.off</span><span class="java8">(</span><span class="java4">new </span><span class="java10">Job</span><span class="java8">()<br />
&#xA0; {<br />
&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java10">String run</span><span class="java8">()<br />
&#xA0;&#xA0;&#xA0; {<br />
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">return </span><span class="java10">bean.getValue</span><span class="java8">()</span><span class="java10">;<br />
&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
&#xA0; }))</span><span class="java10">.run</span><span class="java8">()</span><span class="java10">;<br />
&#xA0; label.setText</span><span class="java8">(</span><span class="java10">text</span><span class="java8">)</span><span class="java10">;<br />
</span><span class="java8">}</span></code></div>

      </subsection>
      
      <subsection name="CGLib">
        <p>
          Starting with release 1.4 Spin isn't any longer restricted on using JDK virtual proxies. The creation of proxies is now encapsulated in the interface  <a href="./apidocs/spin/ProxyFactory.html">ProxyFactory</a>.
        </p>
        <p>
          <em>Spin</em> contains a <a class="external" href="http://cglib.sourceforge.net">CGLib</a> specific implementation <a href="./apidocs/spin/CGLibProxyFactory.html">CGLibProxyFactory</a> that offers the following benefits:
        </p>
        <ul>
          <li>improved performance on interception of method invocations</li>
          <li>no need to to use interfaces for your beans as required by JDK proxies</li>
        </ul>
        <p>
          For this you just have to change the default factory of proxies:
        </p>
        <blockquote>
          <code>Spin.setDefaultProxyFactory(new CGLibProxyFactory());</code>
        </blockquote>
      </subsection>      
    </section>
  </body>
</document>