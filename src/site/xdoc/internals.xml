<document>
  <properties>
    <author email="sven@users.sourceforge.net">Sven Meier</author>
    <title>Spin</title>
  </properties>
  <body>
    <section name="Internals">
      <p>
        <em>Spin</em> is built on top of virtual proxies and a technique borrowed from the java.awt.Dialog component. While a modal dialog has to wait for user input, the EDT is rerouted to the swing event processing to handle further events.
      </p>
      <p>
        The following diagram shows how this is used in <em>Spin</em>. Each invocation of a bean's method is intercepted and handled by a    <a href="./apidocs/spin/off/SpinOffEvaluator.html">SpinOffEvaluator</a>:<br/>
        getValue() is evaluated asynchronously on another thread (customizable with a <a href="./apidocs/spin/off/Starter.html">Starter</a>) while Swing events are    dispatched through a <a href="./apidocs/spin/off/Dispatcher.html">Dispatcher</a>. Once the call to the bean returns the dispatching of events is stopped and the EDT is free to return to the standard event processing: 

        <span class="centeredImage">  
          <img src="images/sequencespinoff.gif" alt="Spin off sequence"/>
        </span>
      </p>
      <p>
        For asynchronous notifications from the bean to the GUI we reuse the technique introduced in the previous sections. But this time the call to <code>invokeAndWait()</code> is encapsulated by <em>Spin</em> with a <a href="./apidocs/spin/over/SpinOverEvaluator.html">SpinOverEvaluator</a>:

        <span class="centeredImage">  
        <img src="images/sequencespinover.gif" alt="Spin over sequence"/>
        </span>
      </p>
      <p>  
        Please take a look at the full <a href="./apidocs/index.html">API</a> for details on how to customize <em>Spin</em>.
      </p>

    <subsection name="Utilizing CGLib">
      <p>
        Starting with release 1.4 Spin isn't any longer restricted on using JDK virtual proxies. The creation of proxies is now encapsulated in the interface  <a href="./apidocs/spin/ProxyFactory.html">ProxyFactory</a>.
      </p>
      <p>
    	<em>Spin</em> contains a <a href="http://cglib.sourceforge.net">CGLib</a> specific implementation <a href="./apidocs/spin/CGLibProxyFactory.html">CGLibProxyFactory</a> that offers the following benefits:
        <ul>
          <li>
            improved performance on interception of method invocations
          </li>
          <li>
            no need to to use interfaces for your beans as required by JDK proxies
          </li>
        </ul>
        For this you just have to change the default factory of proxies:
      </p>
<pre>
  Spin.setDefaultProxyFactory(new CGLibProxyFactory());
</pre>
	</subsection>
	
    <subsection name="Caveats">
      <p>
        Although <em>Spin</em> handles threading transparently there are caveats with <em>spin-off</em> that you should be aware of:
      </p>
      <dl>
        <dt>Security</dt>
        <dd>
          For dispatching <em>Spin</em> needs access to AWT internals that are not available in applets or untrusted JavaWebStart applications due to security restrictions. This will hopefully change once AWT offers an official way to dispatch events.<br/>
          Meanwhile <em>Spin</em> offers alternative solutions which are less performant but also work in a secured environment. Please take a look at <a href="./apidocs/spin/off/DialogDispatcherFactory.html"> DialogDispatcherFactory</a> and <a href="./apidocs/spin/off/InternalOptionPaneDispatcherFactory.html"> InternalOptionPaneDispatcherFactory</a>.
        </dd>
        <dt>Reference backdoor</dt>
        <dd>
          If your GUI hands over references to parts of its swing models (e.g. TreeModel, TableModel) in method calls to your bean, these could possibly be altered on another thread than the EDT thus VIOLATING THE SWING SINGLE THREADING RULE.
        </dd>
        <dt>Bean threadsafety</dt>
        <dd>
          If your GUI doesn't disable all further actions while an invocation on your bean is being processed, the event dispatching may cause a second concurrent call to the bean. In cases where this is desired the BEAN MUST BE THREADSAFE.
        </dd>
        <dt>Asynchronous<a name="asynchronous"/></dt>
        <dd>
          Whenever your GUI calls a beans method through <em>Spin</em>, further actions should be allowed only if they are related to the current <em>Spin</em> invocation. This includes <code>Cancel</code> functionality and the retrieval of the current state of invocation or intermediate results (e.g. for updating a progress bar or incremental filling of a table).<br/>
          You're running into problems if you're using <em>Spin</em> for real asynchronous executions. Let me give an example:<br/>
          File tranfers of an Explorer-like application wich can be arbitrarily started and stopped while others are independently continuing are NOT A RECOMMENDED USAGE for <em>Spin</em>. Nevertheless <em>Spin</em> can be used to <em>spin-over</em> events from the transfers (e.g. completion notification) to the EDT.
        </dd>
        <dt>Incomplete Event Handling</dt>
        <dd>
          An event that triggers <em>Spin</em> will not be completely precessed until the return of the <em>Spin</em> invocation.<br/>
          This might lead to minor visual annoyances, e.g. a JComboBox that does not close its popup or a JButton that stays depressed while <em>Spin</em> is running. But this behaviour could also result in other unexpected behaviours that you should be aware of.<br/>
          Because of this <em>Swing</em> developers have expressed their concern about <em>Spin</em> and similar techniques, stating that '<em>Swing</em> is not completely reentrant'.<br/>
          While this may be true, the same objection could be brought forward against any modal dialog or modal internal frame. If you're using these in your application there is no reason to be afraid of <em>Spin</em>.
        </dd>
      </dl>
    </subsection>
    
    </section>
  </body>
</document>