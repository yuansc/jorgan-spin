<document>
  <properties>
    <author email="sven@users.sourceforge.net">Sven Meier</author>
    <title>Spin</title>
  </properties>
  <body>
    <section name="Swingworker">
      <p>
        SwingWorker is a utility class that aims to ease the efforts to write a non-freezing GUI. Although not included in the standard Java distribution it is maintained by the Swing team and downloadable at <a href="http://www.theswingconnection.com">The Swing Connection</a>.
      </p>
      <p>
        As you can see in the following table a SwingWorker removes some of the visual clutter seen in the previous section. To use it you have to subclass it, placing extensive calculations into method <code>construct()</code>. In <code>finished()</code> you can alter the label because this method is called on the EDT. This is similar to our previous solution but this time the threading is handled by the superclass:
      </p>
      <table border="1" cellpadding="4" cellspacing="0" width="100%">
        <tr valign="top">
          <td width="50%" class="GUI">GUI</td>
          <td width="50%" class="notGUI">BeanImpl</td>
        </tr>
        <tr valign="top">
          <td>
<pre>
public void actionPerformed(ActionEvent e)
{<span class="onEDT">
  label.setText("...");
  new SwingWorker()</span>
  {
    public Object construct()
    {
      <span class="offEDT">return bean.getValue();</span>
    }

    public void finished()
    {
      <span class="onEDT">label.setText((String)getValue());</span>
    }
  }<span class="onEDT">).start();</span>
}


public void propertyChange(final PropertyChangeEvent ev)
{
  <span class="offEDT">SwingUtilities.invokeAndWait(new Runnable()</span>
  {
    public void run()
    {
      <span class="onEDT">label.setText((String)ev.getNewValue());</span>        
    }
  }<span class="offEDT">);</span>
}
</pre>
          </td>
          <td>
<pre>
public String getValue()
{<span class="offEDT">
  String value;
  
  // extensive calculation
  
  return value;
</span>}










public void setValue(String value)
{<span class="offEDT">
  this.value = value;
  firePropertyChange(value);
</span>}
</pre>
          </td>
        </tr>
      </table>
      <p>
        The SwingWorker offers no support for our notification problem so we stick to our previous solution in <code>propertyChange()</code>.
      </p>
      <p>
        What about the colors?<br/>
        The situation hasn't really improved. The indentation of code was minimized but the <span class="offEDT">red</span> and <span class="onEDT">green</span> colors in the GUI stay the same. So the problem above isn't resolved yet.
      </p>
    </section>
  </body>
</document>