<document>
  <properties>
    <author email="sven@users.sourceforge.net">Sven Meier</author>
    <title>Spin</title>
  </properties>
  <body>
    <section name="Conclusion">
      <p>
        <em>Spin</em> is a small library that concentrates on offering a powerful solution to build non-freezing Swing applications. <em>Spin</em> enforces good application design by separating the GUI and non-visual components through interfaces. If it is used wisely in an application framework, the GUI programmers will never have to think about threads again.
      </p>
      <p>  
        <em>Spin</em> comes with several demonstration classes that show how to solve formerly challenging Swing programming problems with ease:
      </p>
      <ul>
        <li>spin.demo.SpinOffGUI - shows how to execute extensive calculations without "freeze"</li>
        <li>spin.demo.SpinOverGUI - demonstrates asynchronous event notification without pain</li>
        <li>spin.demo.exception.ExceptionGUI - proves the transparent exception handling offered by Spin</li>
        <li>spin.demo.pogress.PullGUI - shows how to handle visual progress while extensive calculations are executed</li>
        <li>spin.demo.pogress.PushGUI - uses asynchronous event notification to update a progressbar</li>
        <li>spin.demo.prompt.CallGUI - explains how to prompt the user between multiple extensive calculations</li>
        <li>spin.demo.prompt.CallbackGUI - prompts the user for input which is triggered by callbacks from an extensive calculation</li>
        <li>spin.demo.async.AsyncGUI - starts asynchronous calculations transparently through Spin</li>
        <li>spin.demo.dispatcher.DispatcherGUI - test different dispatchers</li>
      </ul>   
      <p>  
        We have used <em>Spin</em> successfully in several projects to wrap all remote communication (RMI) between rich-clients and the application server.
      </p>

      <subsection name="Acknowledgments">
        <p>
          The <em>Spin</em> project is influenced by the  <a href="http://foxtrot.sourceforge.net">Foxtrot</a> project. Foxtrot is the inventor of the <b>Synchronous Model</b> (<em>Spin</em> has adopted this technique) but uses an API that is similar to <code>SwingWorker</code>. It offers a subset of <em>Spin</em>s features - it lacks transparent exception handling and offers no solution for asynchronous callbacks:
        </p>
<pre>
public void actionPerformed(ActionEvent e)
{<span class="onEDT">
  label.setText("...");
  String text = (String)Worker.post(new Job()</span>
  {
    public Object run()
    {
      <span class="offEDT">return bean.getValue();</span>
    }
  }<span class="onEDT">);
  label.setText(text);</span>
}
</pre>
        <p>
          The following code shows how Foxtrot can be 'simulated' with <em>Spin</em> (if you insist on restricting yourself to only one generic interface named <code>Job</code> or what-ever-you-like):
        </p>
<pre>
public void actionPerformed(ActionEvent e)
{<span class="onEDT">
  label.setText("...");
  String text = ((Job)Spin.off(new Job()</span>
  {
    public String run()
    {
      <span class="offEDT">return bean.getValue();</span>
    }
  }<span class="onEDT">)).run();
  label.setText(text);</span>
}
</pre>
      </subsection>
    </section>
  </body>
</document>